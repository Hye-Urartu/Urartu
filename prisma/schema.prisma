// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Client {
  id           String  @id @unique @default(uuid())
  name         String
  redirectUrls String
  logo         String?
  userAuthCodes UserAuthCode[]
  userAuthTokens UserAuthToken[]
}

model User {
  id         String          @id @unique @default(uuid())
  authMethod String
  email      String          @unique
  firstName  String
  lastName   String
  password   String?
  avatar     String?
  authCodes  UserAuthCode[]
  authTokens UserAuthToken[]
  passwordResetSessions PasswordResetSession[]
}

model UserAuthCode {
  code     String   @unique
  verifier String
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  client   Client  @relation(fields: [clientId], references: [id])
  clientId String
  expireAt DateTime
}

model UserAuthToken {
  token  String        @unique
  type   AuthTokenType
  user   User         @relation(fields: [userId], references: [id])
  userId String
  client Client       @relation(fields: [clientId], references: [id])
  clientId String
  expireAt DateTime
}

model JWK {
  id        String   @id @unique @default(uuid())
  raw       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SignupSession {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  expiresAt DateTime
}

model PasswordResetSession {
  id        String   @id @unique @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  expiresAt DateTime
}

enum AuthTokenType {
  access_token
  refresh_token
  id_token
}